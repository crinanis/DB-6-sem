1. SQLite - это встраиваемая реляционная база данных, которая предоставляет легковесный, самодостаточный и серверо-независимый способ 
хранения данных. Она отличается тем, что база данных SQLite является файлом на диске, который может быть использован 
в рамках одного процесса или даже на уровне одного потока. 

2. Классы хранения (Storage Classes) в SQLite определяют типы данных, которые могут быть сохранены в столбцах таблицы базы данных. 
В SQLite существуют пять классов хранения:
   - NULL: Представляет отсутствие значения.
   - INTEGER: Представляет целочисленные значения.
   - REAL: Представляет числа с плавающей запятой.
   - TEXT: Представляет текстовые строки.
   - BLOB: Представляет двоичные данные.

3. Аффинированные типы (Affinity Types) в SQLite определяют ожидаемый класс хранения для столбцов таблицы:
   - TEXT: Входные данные ожидаются в текстовом формате.
   - NUMERIC: Входные данные могут быть числами или текстом, который может быть преобразован в числа.
   - INTEGER: Входные данные ожидаются в целочисленном формате.
   - REAL: Входные данные ожидаются в формате числа с плавающей запятой.
   - NONE: Входные данные могут быть любого типа и не ограничены определенным классом хранения.

4. В SQLite дата и время могут быть хранены и представлены с использованием следующих типов данных:
   - TEXT: Дата и время могут быть сохранены в текстовом формате, например, 'YYYY-MM-DD HH:MM:SS'.
   - INTEGER: Дата и время могут быть представлены в виде целочисленного значения, используя формат UNIX timestamp (количество секунд, прошедших с 1 января 1970 года).
   - REAL: Дата и время могут быть представлены в виде числа с плавающей запятой, представляющего количество дней или доли дня.

5. Правила сравнения данных в SQLite следуют некоторым особенностям. Некоторые из них включают:
   - Строки сравниваются по значению, используя правила лексикографического порядка.
   - Значения с разными классами хранения сравниваются в соответствии с правилами преобразования типов.
   - NULL-значения не равны друг другу и не равны ни одному другому значению, кроме NULL.
   - Сравнение чувствительно к регистру по умолчанию, но можно использовать операторы COLLATE для изменения поведения сравнения.

6. Объекты SQLite включают:
   - Таблицы: Хранят данные в структурированной форме в виде строк и столбцов.
   - Индексы: Повышают производительность поиска и сортировки данных.
   - Представления: Виртуальные таблицы, которые представляют собой результат выполнения запросов.
   - Триггеры: Логические конструкции, которые реагируют на определенные события и выполняют определенные действия.
   - Процедуры: Хранят набор инструкций SQL, которые могут быть вызваны и выполнены.
   - Функции: Пользовательские функции, которые могут быть вызваны из SQL-запросов для выполнения специальных операций.

7. В SQLite внешние ключи используются для поддержки целостности данных и связей между таблицами. Порядок использования внешних ключей в SQLite включает следующие шаги:
   - Создание таблицы, которая будет содержать внешний ключ, и таблицы, на которую он ссылается (родительская таблица).
   - Определение внешнего ключа в дочерней таблице, указывая столбец или столбцы, которые должны ссылаться на столбец или столбцы в родительской таблице.
   - Установка правил обновления и удаления для внешнего ключа, определяющих действия, которые должны быть выполнены, когда изменяются или удаляются соответствующие строки в родительской таблице.
!!! Выполнение команды PRAGMA foreign_keys = ON; включает поддержку и активацию проверки внешних ключей в SQLite.
По умолчанию, в SQLite проверка внешних ключей отключена, и база данных не будет автоматически проверять целостность ссылок между таблицами, связанными внешним ключом. Это означает, что вы можете вставлять, обновлять или удалять записи, не учитывая связанные ограничения внешних ключей.

8. PRAGMA в SQLite - это команда, которая используется для управления различными настройками и параметрами базы данных. PRAGMA позволяет получать и устанавливать значения различных опций
 и параметров, таких как уровень изоляции транзакций, оптимизация запросов, использование индексов и т. д. PRAGMA не является частью стандарта SQL, но предоставляет дополнительные возможности для управления SQLite базой данных.

9. В SQLite существуют различные типы индексов, включая:
   - B-деревья (B-Trees): Это наиболее распространенный тип индекса в SQLite. B-деревья используются для ускорения поиска и сортировки данных в таблицах. Они поддерживают быстрый доступ к данным по ключу.
   - Хеш-таблицы (Hash Tables): Хеш-таблицы используются для быстрого поиска данных по хеш-значению ключа. Они обеспечивают быстрый доступ к данным, но не поддерживают сортировку.
   - Индексы без отображения на диск (In-Memory Indexes): Это индексы, которые хранятся только в оперативной памяти и не сохраняются на диск. Они обеспечивают очень быстрый доступ к данным, но могут быть использованы только во время выполнения сеанса базы данных.

10. Программные объекты SQLite включают:
    - Библиотека SQLite: Статическая или динамическая библиотека, которая предоставляет функции для работы с базами данных SQLite в приложении.
    - Консольный интерфейс SQLite (sqlite3): Интерактивный интерфейс командной строки, который позволяет взаимодействовать с базами данных SQLite и выполнять SQL-запросы и команды.
    - SQLite Shell: Утилита командной строки, которая предоставляет расширенные возможности для работы с базами данных SQLite, включая выполнение сценариев SQL, импорт/экспорт данных, настройку параметров и т. д.
    - Интерфейсы программирования (API): SQLite предоставляет различные интерфейсы программирования, такие как C/C++, Python, Java, .NET и другие, для взаимодействия с базой данных SQLite в приложении и выполнения операций базы данных с использованием соответствующего языка программирования.